OSS: open source software 오픈소스
누구나 특별한 제한 없이 그 코드를 보고 사용할 수 있는 오픈소스 라이선스를 만족하는 SW
소스코드를 공개, 공개 소스의 복제도 가능
통상 간략하게 오픈소스, OSS라 칭함

Open Source Initiative(OSI)
공개 소스 정의(OSD)의 관리 및 촉진을 담당하는 비영리 조합
OSI가 인증하는 공개 소스 소프트웨어(OSS) 인증 마크

소프트웨어가 실제로 공개 소스라는 것을 증명

소프트웨어의 소스코드를 자유롭게 읽고, 수정 및 재배포가 가능
소프트웨어의 향상과 발전
여러 사람들이 고치고 쓰고 버그를 개선하는 것이 보다 빠를 수 있음

자유 소프트웨어(Free Software) 
리처드 스톨먼(Richard Stallman), 자유 소프트웨어 재단 설립
GNU 프로젝트와 관련된 소프트웨어에서 자유를 중시

카피레프트(Copyleft, Copyright의 반대되는 개념)
-> 제작자에게 저작권은 인정하면서 어느 누구나 소프트웨어를 복제해
   사용할 수 있는 권리를 주어야 한다는 개념을 갖는 SW 의미

오픈소스 지원 관리 서버
소스코드를 통해 여러 개발자가 협업하고 공유하며 이를 지원하는 방안을 마련

오픈소스 커뮤니티 내의 사고 및 협업 양식
커뮤니티에서 개발된 아이디어와 소프트웨어를 교환
창의적이고 과학적이며 기술적인 발전을 이끌어낼 수 있음

협업 방식
1.서로 간에 소스코드를 사용, 변경 및 공유할 수 있도록 커뮤니티 프로덕션과 동료 평가에 의존
2.개발자들은 보다 혁신적인 소프트웨어 솔루션을 만들기 위해 인사이트, 아이디어 및 코드를 공유
3.모든 사용자가 재활용성과 접근성을 향상시키기 위해 이를 수정, 개선 및 재분배할 수 있도록 보장
4.대규모 협업의 기본 원칙으로 운용

<오픈소스 소프트웨어 장단점>
장점
1.소스코드를 공개
2.커스터마이징과 혁신 지원

단점
1.공개의 의무
2.품질보증 및 유지보수, 보안 등의 어려움

오픈소스 개발 모델
대부분의 웹을 지원하는 서비스 스택 모델: LAMP

1. Linux
2. Apache
3. MySQL
4. PHP

오픈소스 소프트웨어 라이선스 종류
GNU General Public©(GPL)
->AGPL, LGPL
MIT License©
Apache
BSD
MySQL™:
SUSE
Ubuntu®

 GPL(GNU - General Public License)
자유소프트웨어재단 설립자인 리처드 스톨만에 의해서 만들어졌음
가장 많이 알려진 카피레프트에 속한 라이선스
프로그램은 목적이나 형태의 제한없이 사용이 가능
프로그램을 이후 수정하고 배포하는 모든 경우에 무조건 GPL로 공개를 해야 함

GPL 라이센스 적용 예
리눅스 커널, Git, 마리아 DB, 워드프레스, 파이어폭스(v2.0) 등

AGPL(GNU - Affero GPL)
네트워크로 상호 작용하는 소프트웨어의 소스코드도 공개해야 한다는 조항을 추가한 라이선스
서버에서 프로그램을 실행해서 다른 사용자들과 통신 중

AGPL 라이센스 적용 예
몽고DB 등

LGPL(GNU - Lesser GPL)
GPL 라이센스를 사용할 때 반드시 소스코드를 다시 GPL로 공개해야 하는 부담 때문에 실무에서
사용되기 어려운 점을 보완하기 위해서 만들어진 라이선스

초기에는 한정된 라이브러리에만 적용된다는 것을 나타내기 위해서 Library GPL이라고 불렀으나
이 용어가 모든 라이브러리에 해당된다는 오해를 만들기 쉽기 때문에 Lesser Gpl로 별칭 변경

LGPL 라이센스 적용 예
파이어폭스(v2.1) 등

Apache License
소스코드 공개에 대한 의무사항은 라이센스에 포함되어 있지 않음

Apache License 적용 예
안드로이드, 하둡 등

 MIT License
라이센스와 저작권 관련 명시 의무
가장 느슨한 조건을 가지고 있어서 많은 사람들이 사용하기 용이

MIT License 라이센스 적용 예
부트스트랩, Angular.js, Backbone.js, jQuery

Git Stash
커밋할 필요 없이 파일의 변경 사항을 숨기거나 비밀리에 저장할 수 있는 강력한 도구
따로 안전한 곳에 저장했다가 다시 가져올 수 있는 기능
저장내용(작업 디렉토리 내용과 스테이지 내용)

Stash 저장 구조
Stack of git stashes
가장 최근의 내용이 가장 위에 저장되는 구조

Git stash 필요성
브랜치 이동 또는 이전 커밋으로 이동하려면
커밋할 게 없고, 작업 트리가 깨끗해야 함
$ git switch bname
$ git checkout HEAD~

stash로 저장되는 내용
작업 디렉토리 내용과 스테이징 영역 내용이 stash에 저장되고
작업 디렉토리 내용과 스테이징 영역 내용이 최신 커밋 자료로 남음

작업 폴더와 스테이징 영역을 숨김(stash)에 저장하고 작업 폴더를 정리
$ git stash
$ git stash –m ‘메시지
$ git stash save
$ git stash save ‘메시지’

옵션
--keep-index, -k
 스테이징 영역은 제외하고 작업 폴더만 저장
 그러므로 checkout할 수는 없음

--include-untracked, -u
 Untracked 파일도 포함해 저장

기본으로 작업 디렉토리 내용만 다시 복사해 활용
$ git stash apply

스테이지 영역도 함께 복사하기 위해서는 옵션 사용
$ git stash apply --index

옵션 –p | --patch
변경된 모든 사항들을 저장하는 것이 아니며 대화형 프롬프트를 통해
자신이 stash에 저장할 것과 저장하지 않을 것을 지정 가능

$ git stash list(목록 보기)

특정 stash 확인
$ git stash show
$ git stash show –p

해당 stash 항목이 생성되었을 때의 커밋 자료와 해당 stash 항목 간의
차이로 표시
$ git stash show stash@{n}
$ git stash show stash@{n} –p

임시 저장된 stash 반영

최근 또는 지정된 임시저장소 내용을 가져와 반영하고 삭제
$ git stash pop
$ git stash pop stash@{n}

최근 또는 지정된 임시저장소 내용을 가져와 반영, 작업 디렉토리만 반영, stash 목록은 그대로
$ git stash apply
$ git stash apply stash@{n}

최근 또는 지정된 임시저장소 내용을 가져와 반영, 작업 디렉토리와
스테이징 영역도 반영, stash 목록은 그대로
$ git stash apply --index
$ git stash apply --index stash@{n}

최근 임시저장 내용을 삭제
  $ git stash drop
지정된 임시저장 내용을 삭제
 $ git stash drop stash@{n}

모든 stash 목록을 모두 제거
 $ git stash clear 

Untracked 파일 삭제
$ git clean
바로 삭제되지 않음

$ git clean -i

$ git clean –f
무조건 삭제








