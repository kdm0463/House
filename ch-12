재배치 rebase 병합 수행
base를 수정
이후 다시 'fast-forward 병합’ 수행: 이 병합을 직접 다시 해야함

fast-forward 병합’ 방식
master 브랜치 뒤로 bugfix 브랜치의 이력이 이동
이력이 하나의 줄기로 이어짐
충돌 발생이 가능

마스터 브랜치의 위치를 변경하기 위해서는
master 브랜치에서 bugfix 브랜치를 fast-foward(빨리 감기) 병합 필요

merge
여러 분기가 생긴 변경 내용의 이력이 모두 그대로 남아 있기 때문에 이력이 복잡해짐

<3-way merge와 rebase 비교>

rebase
히스토리가 선형으로 단순해지고 좀 더 깨끗한 이력을 남김
원래의 커밋 이력이 변경됨
정확한 이력을 남겨야 할 필요가 있을 경우에는 사용하면 안됨

일반적 rebase 방법
topic에서 main을 rebase 한 이후, 다시 main으로 이동 fast-forward 병합 수행
$ git checkout topic
$ git rebase main
$ git checkout main
$ git merge topic

다른 rebase 방법: 어느 브랜치든 main topic 순서로 재배치 방법
$ git rebase main topic
$ git checkout main
$ git merge topic

$ git commit --amend
새로운 커밋 ID로 수정됨

명령어 상에 직접 메시지 입력
$ git commit --amend –m 'new message‘

메시지 수정 없이 다시 커밋 수정
$ git commit --amend --no-edit

rebase의 --interactive를 사용하여 커밋 시퀀스를 새로운 기본 커밋에 결합
$ git rebase -i HEAD~3
$ git rebase --interactive HEAD~3
HEAD~3: 수정할 커밋의 직전 커밋
실제 HEAD~2부터 수정 가능

$ git rebase --interactive HEAD~3
기본 편집기로 열리며, HEAD~3이면 HEAD~2, HEAD~1, HEAD 3개의 행을 편집 가능
로그 결과와 다르게 오래된 커밋부터 표시

주요 rebase –i 대화형 명령어
p(ick): 해당 커밋을 수정하지 않고 그대로 사용
r(eword): 개별 커밋 메시지를 다시 작성
s(quash): 계속된 이후 커밋을 이전 커밋에 결합
d(rop): 커밋 자체를 삭제

squash
이후 것(더 최신의 커밋)을 이전 커밋(더 오래된 커밋)에 뭉치는 방법

Vscode 메뉴
+
Commit 



















  
